<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:security="http://www.springframework.org/schema/security"
           elementFormDefault="qualified"
           targetNamespace="http://www.springframework.org/schema/security">
  <xs:attributeGroup name="hash">
      <xs:attribute name="hash" use="required">
         <xs:annotation>
            <xs:documentation>Defines the hashing algorithm used on user passwords. Bcrypt is recommended.
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="bcrypt"/>
               <xs:enumeration value="plaintext"/>
               <xs:enumeration value="sha"/>
               <xs:enumeration value="sha-256"/>
               <xs:enumeration value="md5"/>
               <xs:enumeration value="md4"/>
               <xs:enumeration value="{sha}"/>
               <xs:enumeration value="{ssha}"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="base64">
      <xs:attribute name="base64" use="required" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>Whether a string should be base64 encoded
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="request-matcher">
      <xs:attribute name="request-matcher" use="required">
         <xs:annotation>
            <xs:documentation>Supersedes the 'path-type' attribute. Defines the strategy use for matching incoming
                requests. Currently the options are 'ant' (for ant path patterns), 'regex' for regular
                expressions and 'ciRegex' for case-insensitive regular expressions.
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="ant"/>
               <xs:enumeration value="regex"/>
               <xs:enumeration value="ciRegex"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="path-type">
      <xs:attribute name="path-type" use="required">
         <xs:annotation>
            <xs:documentation>Deprecated. Use request-matcher instead.
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="ant"/>
               <xs:enumeration value="regex"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="port">
      <xs:attribute name="port" use="required" type="xs:positiveInteger">
         <xs:annotation>
            <xs:documentation>Specifies an IP port number. Used to configure an embedded LDAP server, for example.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="url">
      <xs:attribute name="url" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Specifies a URL.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="id">
      <xs:attribute name="id" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="name">
      <xs:attribute name="name" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ref">
      <xs:attribute name="ref" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Defines a reference to a Spring bean Id.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="cache-ref">
      <xs:attribute name="cache-ref" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Defines a reference to a cache for use with a UserDetailsService.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="user-service-ref">
      <xs:attribute name="user-service-ref" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A reference to a user-service (or UserDetailsService bean) Id
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="authentication-manager-ref">
      <xs:attribute name="authentication-manager-ref" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A reference to an AuthenticationManager bean
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="data-source-ref">
      <xs:attribute name="data-source-ref" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A reference to a DataSource bean
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="debug">
      <xs:annotation>
         <xs:documentation>Enables Spring Security debugging infrastructure. This will provide human-readable
                (multi-line) debugging information to monitor requests coming into the security filters.
                This may include sensitive information, such as request parameters or headers, and should
                only be used in a development environment.
                </xs:documentation>
      </xs:annotation>
      <xs:complexType/>
   </xs:element>
  
  <xs:attributeGroup name="password-encoder.attlist">
      <xs:attribute name="ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>Defines a reference to a Spring bean Id.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hash">
         <xs:annotation>
            <xs:documentation>Defines the hashing algorithm used on user passwords. Bcrypt is recommended.
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="bcrypt"/>
               <xs:enumeration value="plaintext"/>
               <xs:enumeration value="sha"/>
               <xs:enumeration value="sha-256"/>
               <xs:enumeration value="md5"/>
               <xs:enumeration value="md4"/>
               <xs:enumeration value="{sha}"/>
               <xs:enumeration value="{ssha}"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="base64" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>Whether a string should be base64 encoded
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  
  <xs:attributeGroup name="user-property">
      <xs:attribute name="user-property" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A property of the UserDetails object which will be used as salt by a password encoder.
                Typically something like "username" might be used.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="system-wide">
      <xs:attribute name="system-wide" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A single value that will be used as the salt for a password encoder.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="role-prefix">
      <xs:attribute name="role-prefix" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A non-empty string prefix that will be added to role strings loaded from persistent
                storage (e.g. "ROLE_"). Use the value "none" for no prefix in cases where the default is
                non-empty.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="use-expressions">
      <xs:attribute name="use-expressions" use="required" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>Enables the use of expressions in the 'access' attributes in &lt;intercept-url&gt; elements
                rather than the traditional list of configuration attributes. Defaults to 'false'. If
                enabled, each attribute should contain a single boolean expression. If the expression
                evaluates to 'true', access will be granted.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="ldap-server">
      <xs:annotation>
         <xs:documentation>Defines an LDAP server location or starts an embedded server. The url indicates the
                location of a remote server. If no url is given, an embedded server will be started,
                listening on the supplied port number. The port is optional and defaults to 33389. A
                Spring LDAP ContextSource bean will be registered for the server with the id supplied.
                </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="security:ldap-server.attlist"/>
      </xs:complexType>
   </xs:element>
  <xs:attributeGroup name="ldap-server.attlist">
      <xs:attribute name="id" type="xs:token">
         <xs:annotation>
            <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="url" type="xs:token">
         <xs:annotation>
            <xs:documentation>Specifies a URL.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="port" type="xs:positiveInteger">
         <xs:annotation>
            <xs:documentation>Specifies an IP port number. Used to configure an embedded LDAP server, for example.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="manager-dn" type="xs:string">
         <xs:annotation>
            <xs:documentation>Username (DN) of the "manager" user identity which will be used to authenticate to a
                (non-embedded) LDAP server. If omitted, anonymous access will be used.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="manager-password" type="xs:string">
         <xs:annotation>
            <xs:documentation>The password for the manager DN. This is required if the manager-dn is specified.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ldif" type="xs:string">
         <xs:annotation>
            <xs:documentation>Explicitly specifies an ldif file resource to load into an embedded LDAP server. The
                default is classpath*:*.ldiff
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="root" type="xs:string">
         <xs:annotation>
            <xs:documentation>Optional root suffix for the embedded LDAP server. Default is "dc=springframework,dc=org"
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ldap-server-ref-attribute">
      <xs:attribute name="server-ref" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>The optional server to use. If omitted, and a default LDAP server is registered (using
                &lt;ldap-server&gt; with no Id), that server will be used.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="group-search-filter-attribute">
      <xs:attribute name="group-search-filter" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Group search filter. Defaults to (uniqueMember={0}). The substituted parameter is the DN
                of the user.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="group-search-base-attribute">
      <xs:attribute name="group-search-base" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Search base for group membership searches. Defaults to "" (searching from the root).
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="user-search-filter-attribute">
      <xs:attribute name="user-search-filter" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>The LDAP filter used to search for users (optional). For example "(uid={0})". The
                substituted parameter is the user's login name.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="user-search-base-attribute">
      <xs:attribute name="user-search-base" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Search base for user searches. Defaults to "". Only used with a 'user-search-filter'.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="group-role-attribute-attribute">
      <xs:attribute name="group-role-attribute" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>The LDAP attribute name which contains the role name which will be used within Spring
                Security. Defaults to "cn".
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="user-details-class-attribute">
      <xs:attribute name="user-details-class" use="required">
         <xs:annotation>
            <xs:documentation>Allows the objectClass of the user entry to be specified. If set, the framework will
                attempt to load standard attributes for the defined class into the returned UserDetails
                object
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="person"/>
               <xs:enumeration value="inetOrgPerson"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="user-context-mapper-attribute">
      <xs:attribute name="user-context-mapper-ref" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Allows explicit customization of the loaded user object by specifying a
                UserDetailsContextMapper bean which will be called with the context information from the
                user's directory entry
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="ldap-user-service" substitutionGroup="security:any-user-service">
      <xs:annotation>
         <xs:documentation>This element configures a LdapUserDetailsService which is a combination of a
                FilterBasedLdapUserSearch and a DefaultLdapAuthoritiesPopulator.
                </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="security:ldap-us.attlist"/>
      </xs:complexType>
   </xs:element>
  <xs:attributeGroup name="ldap-us.attlist">
      <xs:attribute name="id" type="xs:token">
         <xs:annotation>
            <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="server-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>The optional server to use. If omitted, and a default LDAP server is registered (using
                &lt;ldap-server&gt; with no Id), that server will be used.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="user-search-filter" type="xs:token">
         <xs:annotation>
            <xs:documentation>The LDAP filter used to search for users (optional). For example "(uid={0})". The
                substituted parameter is the user's login name.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="user-search-base" type="xs:token">
         <xs:annotation>
            <xs:documentation>Search base for user searches. Defaults to "". Only used with a 'user-search-filter'.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="group-search-filter" type="xs:token">
         <xs:annotation>
            <xs:documentation>Group search filter. Defaults to (uniqueMember={0}). The substituted parameter is the DN
                of the user.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="group-search-base" type="xs:token">
         <xs:annotation>
            <xs:documentation>Search base for group membership searches. Defaults to "" (searching from the root).
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="group-role-attribute" type="xs:token">
         <xs:annotation>
            <xs:documentation>The LDAP attribute name which contains the role name which will be used within Spring
                Security. Defaults to "cn".
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="cache-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>Defines a reference to a cache for use with a UserDetailsService.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="role-prefix" type="xs:token">
         <xs:annotation>
            <xs:documentation>A non-empty string prefix that will be added to role strings loaded from persistent
                storage (e.g. "ROLE_"). Use the value "none" for no prefix in cases where the default is
                non-empty.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="user-details-class">
         <xs:annotation>
            <xs:documentation>Allows the objectClass of the user entry to be specified. If set, the framework will
                attempt to load standard attributes for the defined class into the returned UserDetails
                object
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="person"/>
               <xs:enumeration value="inetOrgPerson"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="user-context-mapper-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>Allows explicit customization of the loaded user object by specifying a
                UserDetailsContextMapper bean which will be called with the context information from the
                user's directory entry
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  
  <xs:attributeGroup name="ldap-ap.attlist">
      <xs:attribute name="server-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>The optional server to use. If omitted, and a default LDAP server is registered (using
                &lt;ldap-server&gt; with no Id), that server will be used.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="user-search-base" type="xs:token">
         <xs:annotation>
            <xs:documentation>Search base for user searches. Defaults to "". Only used with a 'user-search-filter'.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="user-search-filter" type="xs:token">
         <xs:annotation>
            <xs:documentation>The LDAP filter used to search for users (optional). For example "(uid={0})". The
                substituted parameter is the user's login name.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="group-search-base" type="xs:token">
         <xs:annotation>
            <xs:documentation>Search base for group membership searches. Defaults to "" (searching from the root).
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="group-search-filter" type="xs:token">
         <xs:annotation>
            <xs:documentation>Group search filter. Defaults to (uniqueMember={0}). The substituted parameter is the DN
                of the user.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="group-role-attribute" type="xs:token">
         <xs:annotation>
            <xs:documentation>The LDAP attribute name which contains the role name which will be used within Spring
                Security. Defaults to "cn".
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="user-dn-pattern" type="xs:token">
         <xs:annotation>
            <xs:documentation>A specific pattern used to build the user's DN, for example "uid={0},ou=people". The key
                "{0}" must be present and will be substituted with the username.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="role-prefix" type="xs:token">
         <xs:annotation>
            <xs:documentation>A non-empty string prefix that will be added to role strings loaded from persistent
                storage (e.g. "ROLE_"). Use the value "none" for no prefix in cases where the default is
                non-empty.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="user-details-class">
         <xs:annotation>
            <xs:documentation>Allows the objectClass of the user entry to be specified. If set, the framework will
                attempt to load standard attributes for the defined class into the returned UserDetails
                object
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="person"/>
               <xs:enumeration value="inetOrgPerson"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="user-context-mapper-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>Allows explicit customization of the loaded user object by specifying a
                UserDetailsContextMapper bean which will be called with the context information from the
                user's directory entry
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  
  <xs:attributeGroup name="password-compare.attlist">
      <xs:attribute name="password-attribute" type="xs:token">
         <xs:annotation>
            <xs:documentation>The attribute in the directory which contains the user password. Defaults to
                "userPassword".
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hash">
         <xs:annotation>
            <xs:documentation>Defines the hashing algorithm used on user passwords. Bcrypt is recommended.
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="bcrypt"/>
               <xs:enumeration value="plaintext"/>
               <xs:enumeration value="sha"/>
               <xs:enumeration value="sha-256"/>
               <xs:enumeration value="md5"/>
               <xs:enumeration value="md4"/>
               <xs:enumeration value="{sha}"/>
               <xs:enumeration value="{ssha}"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="intercept-methods">
      <xs:annotation>
         <xs:documentation>Can be used inside a bean definition to add a security interceptor to the bean and set up
                access configuration attributes for the bean's methods
                </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element maxOccurs="unbounded" name="protect">
               <xs:annotation>
                  <xs:documentation>Defines a protected method and the access control configuration attributes that apply to
                it. We strongly advise you NOT to mix "protect" declarations with any services provided
                "global-method-security".
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:protect.attlist"/>
               </xs:complexType>
            </xs:element>
         </xs:sequence>
         <xs:attributeGroup ref="security:intercept-methods.attlist"/>
      </xs:complexType>
   </xs:element>
  <xs:attributeGroup name="intercept-methods.attlist">
      <xs:attribute name="access-decision-manager-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>Optional AccessDecisionManager bean ID to be used by the created method security
                interceptor.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  
  <xs:attributeGroup name="protect.attlist">
      <xs:attribute name="method" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>A method name
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="access" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Access configuration attributes list that applies to the method, e.g. "ROLE_A,ROLE_B".
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="method-security-metadata-source">
      <xs:annotation>
         <xs:documentation>Creates a MethodSecurityMetadataSource instance
                </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element maxOccurs="unbounded" name="protect">
               <xs:annotation>
                  <xs:documentation>Defines a protected method and the access control configuration attributes that apply to
                it. We strongly advise you NOT to mix "protect" declarations with any services provided
                "global-method-security".
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:protect.attlist"/>
               </xs:complexType>
            </xs:element>
         </xs:sequence>
         <xs:attributeGroup ref="security:msmds.attlist"/>
      </xs:complexType>
   </xs:element>
  <xs:attributeGroup name="msmds.attlist">
      <xs:attribute name="id" type="xs:token">
         <xs:annotation>
            <xs:documentation>A bean identifier, used for referring to the bean elsewhere in the context.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="use-expressions" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>Enables the use of expressions in the 'access' attributes in &lt;intercept-url&gt; elements
                rather than the traditional list of configuration attributes. Defaults to 'false'. If
                enabled, each attribute should contain a single boolean expression. If the expression
                evaluates to 'true', access will be granted.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="global-method-security">
      <xs:annotation>
         <xs:documentation>Provides method security for all beans registered in the Spring application context.
                Specifically, beans will be scanned for matches with the ordered list of
                "protect-pointcut" sub-elements, Spring Security annotations and/or. Where there is a
                match, the beans will automatically be proxied and security authorization applied to the
                methods accordingly. If you use and enable all four sources of method security metadata
                (ie "protect-pointcut" declarations, expression annotations, @Secured and also JSR250
                security annotations), the metadata sources will be queried in that order. In practical
                terms, this enables you to use XML to override method security metadata expressed in
                annotations. If using annotations, the order of precedence is EL-based (@PreAuthorize
                etc.), @Secured and finally JSR-250.
                </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:choice minOccurs="0">
               <xs:element name="pre-post-annotation-handling">
                  <xs:annotation>
                     <xs:documentation>Allows the default expression-based mechanism for handling Spring Security's pre and post
                invocation annotations (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) to be
                replace entirely. Only applies if these annotations are enabled.
                </xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                     <xs:sequence>
                        <xs:element name="invocation-attribute-factory">
                           <xs:annotation>
                              <xs:documentation>Defines the PrePostInvocationAttributeFactory instance which is used to generate pre and
                post invocation metadata from the annotated methods.
                </xs:documentation>
                           </xs:annotation>
                           <xs:complexType>
                              <xs:attributeGroup ref="security:ref"/>
                           </xs:complexType>
                        </xs:element>
                        <xs:element name="pre-invocation-advice">
                           <xs:annotation>
                              <xs:documentation>Customizes the PreInvocationAuthorizationAdviceVoter with the ref as the
                PreInvocationAuthorizationAdviceVoter for the &lt;pre-post-annotation-handling&gt; element.
                </xs:documentation>
                           </xs:annotation>
                           <xs:complexType>
                              <xs:attributeGroup ref="security:ref"/>
                           </xs:complexType>
                        </xs:element>
                        <xs:element name="post-invocation-advice">
                           <xs:annotation>
                              <xs:documentation>Customizes the PostInvocationAdviceProvider with the ref as the
                PostInvocationAuthorizationAdvice for the &lt;pre-post-annotation-handling&gt; element.
                </xs:documentation>
                           </xs:annotation>
                           <xs:complexType>
                              <xs:attributeGroup ref="security:ref"/>
                           </xs:complexType>
                        </xs:element>
                     </xs:sequence>
                  </xs:complexType>
               </xs:element>
               <xs:element name="expression-handler">
                  <xs:annotation>
                     <xs:documentation>Defines the SecurityExpressionHandler instance which will be used if expression-based
                access-control is enabled. A default implementation (with no ACL support) will be used if
                not supplied.
                </xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                     <xs:attributeGroup ref="security:ref"/>
                  </xs:complexType>
               </xs:element>
            </xs:choice>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="protect-pointcut">
               <xs:annotation>
                  <xs:documentation>Defines a protected pointcut and the access control configuration attributes that apply to
                it. Every bean registered in the Spring application context that provides a method that
                matches the pointcut will receive security authorization.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:protect-pointcut.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="after-invocation-provider">
               <xs:annotation>
                  <xs:documentation>Allows addition of extra AfterInvocationProvider beans which should be called by the
                MethodSecurityInterceptor created by global-method-security.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:ref"/>
               </xs:complexType>
            </xs:element>
         </xs:sequence>
         <xs:attributeGroup ref="security:global-method-security.attlist"/>
      </xs:complexType>
   </xs:element>
  <xs:attributeGroup name="global-method-security.attlist">
      <xs:attribute name="pre-post-annotations">
         <xs:annotation>
            <xs:documentation>Specifies whether the use of Spring Security's pre and post invocation annotations
                (@PreFilter, @PreAuthorize, @PostFilter, @PostAuthorize) should be enabled for this
                application context. Defaults to "disabled".
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="disabled"/>
               <xs:enumeration value="enabled"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="secured-annotations">
         <xs:annotation>
            <xs:documentation>Specifies whether the use of Spring Security's @Secured annotations should be enabled for
                this application context. Defaults to "disabled".
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="disabled"/>
               <xs:enumeration value="enabled"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="jsr250-annotations">
         <xs:annotation>
            <xs:documentation>Specifies whether JSR-250 style attributes are to be used (for example "RolesAllowed").
                This will require the javax.annotation.security classes on the classpath. Defaults to
                "disabled".
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="disabled"/>
               <xs:enumeration value="enabled"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="access-decision-manager-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>Optional AccessDecisionManager bean ID to override the default used for method security.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="run-as-manager-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>Optional RunAsmanager implementation which will be used by the configured
                MethodSecurityInterceptor
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="order" type="xs:token">
         <xs:annotation>
            <xs:documentation>Allows the advice "order" to be set for the method security interceptor.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="proxy-target-class" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>If true, class based proxying will be used instead of interface based proxying.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="mode">
         <xs:annotation>
            <xs:documentation>Can be used to specify that AspectJ should be used instead of the default Spring AOP. If
                set, secured classes must be woven with the AnnotationSecurityAspect from the
                spring-security-aspects module.
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="aspectj"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="metadata-source-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>An external MethodSecurityMetadataSource instance can be supplied which will take priority
                over other sources (such as the default annotations).
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="authentication-manager-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>A reference to an AuthenticationManager bean
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  
  
  
  
  
  
  
  <xs:attributeGroup name="protect-pointcut.attlist">
      <xs:attribute name="expression" use="required" type="xs:string">
         <xs:annotation>
            <xs:documentation>An AspectJ expression, including the 'execution' keyword. For example, 'execution(int
                com.foo.TargetObject.countLength(String))' (without the quotes).
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="access" use="required" type="xs:token">
         <xs:annotation>
            <xs:documentation>Access configuration attributes list that applies to all methods matching the pointcut,
                e.g. "ROLE_A,ROLE_B"
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="http-firewall">
      <xs:annotation>
         <xs:documentation>Allows a custom instance of HttpFirewall to be injected into the FilterChainProxy created
                by the namespace.
                </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="security:ref"/>
      </xs:complexType>
   </xs:element>
  <xs:element name="http">
      <xs:annotation>
         <xs:documentation>Container element for HTTP security configuration. Multiple elements can now be defined,
                each with a specific pattern to which the enclosed security configuration applies. A
                pattern can also be configured to bypass Spring Security's filters completely by setting
                the "security" attribute to "none".
                </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="intercept-url">
               <xs:annotation>
                  <xs:documentation>Specifies the access attributes and/or filter list for a particular set of URLs.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:intercept-url.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element name="access-denied-handler">
               <xs:annotation>
                  <xs:documentation>Defines the access-denied strategy that should be used. An access denied page can be
                defined or a reference to an AccessDeniedHandler instance.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:access-denied-handler.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element name="form-login">
               <xs:annotation>
                  <xs:documentation>Sets up a form login configuration for authentication with a username and password
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:form-login.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element name="openid-login">
               <xs:annotation>
                  <xs:documentation>Sets up form login for authentication with an Open ID identity
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:sequence>
                     <xs:element minOccurs="0" maxOccurs="unbounded" ref="security:attribute-exchange"/>
                  </xs:sequence>
                  <xs:attributeGroup ref="security:form-login.attlist"/>
                  <xs:attribute name="user-service-ref" type="xs:token">
                     <xs:annotation>
                        <xs:documentation>A reference to a user-service (or UserDetailsService bean) Id
                </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
               </xs:complexType>
            </xs:element>
            <xs:element name="x509">
               <xs:annotation>
                  <xs:documentation>Adds support for X.509 client authentication.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:x509.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element ref="security:jee"/>
            <xs:element name="http-basic">
               <xs:annotation>
                  <xs:documentation>Adds support for basic authentication
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:http-basic.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element name="logout">
               <xs:annotation>
                  <xs:documentation>Incorporates a logout processing filter. Most web applications require a logout filter,
                although you may not require one if you write a controller to provider similar logic.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:logout.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element name="session-management">
               <xs:annotation>
                  <xs:documentation>Session-management related functionality is implemented by the addition of a
                SessionManagementFilter to the filter stack.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:sequence>
                     <xs:element minOccurs="0" name="concurrency-control">
                        <xs:annotation>
                           <xs:documentation>Enables concurrent session control, limiting the number of authenticated sessions a user
                may have at the same time.
                </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                           <xs:attributeGroup ref="security:concurrency-control.attlist"/>
                        </xs:complexType>
                     </xs:element>
                  </xs:sequence>
                  <xs:attributeGroup ref="security:session-management.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element name="remember-me">
               <xs:annotation>
                  <xs:documentation>Sets up remember-me authentication. If used with the "key" attribute (or no attributes)
                the cookie-only implementation will be used. Specifying "token-repository-ref" or
                "remember-me-data-source-ref" will use the more secure, persisten token approach.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:remember-me.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element name="anonymous">
               <xs:annotation>
                  <xs:documentation>Adds support for automatically granting all anonymous web requests a particular principal
                identity and a corresponding granted authority.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:anonymous.attlist"/>
               </xs:complexType>
            </xs:element>
            <xs:element name="port-mappings">
               <xs:annotation>
                  <xs:documentation>Defines the list of mappings between http and https ports for use in redirects
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" name="port-mapping">
                        <xs:annotation>
                           <xs:documentation>Provides a method to map http ports to https ports when forcing a redirect.
                </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                           <xs:attributeGroup ref="security:http-port"/>
                           <xs:attributeGroup ref="security:https-port"/>
                        </xs:complexType>
                     </xs:element>
                  </xs:sequence>
               </xs:complexType>
            </xs:element>
            <xs:element ref="security:custom-filter"/>
            <xs:element ref="security:request-cache"/>
            <xs:element name="expression-handler">
               <xs:annotation>
                  <xs:documentation>Defines the SecurityExpressionHandler instance which will be used if expression-based
                access-control is enabled. A default implementation (with no ACL support) will be used if
                not supplied.
                </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:attributeGroup ref="security:ref"/>
               </xs:complexType>
            </xs:element>
            <xs:element ref="security:headers"/>
            <xs:element ref="security:csrf"/>
         </xs:choice>
         <xs:attributeGroup ref="security:http.attlist"/>
      </xs:complexType>
   </xs:element>
  <xs:attributeGroup name="http.attlist">
      <xs:attribute name="pattern" type="xs:token">
         <xs:annotation>
            <xs:documentation>The request URL pattern which will be mapped to the filter chain created by this &lt;http&gt;
                element. If omitted, the filter chain will match all requests.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="security">
         <xs:annotation>
            <xs:documentation>When set to 'none', requests matching the pattern attribute will be ignored by Spring
                Security. No security filters will be applied and no SecurityContext will be available. If
                set, the &lt;http&gt; element must be empty, with no children.
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="none"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="request-matcher-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>Allows a RequestMatcher instance to be used, as an alternative to pattern-matching.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="auto-config" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>A legacy attribute which automatically registers a login form, BASIC authentication and a
                logout URL and logout services. If unspecified, defaults to "false". We'd recommend you
                avoid using this and instead explicitly configure the services you require.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="use-expressions" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>Enables the use of expressions in the 'access' attributes in &lt;intercept-url&gt; elements
                rather than the traditional list of configuration attributes. Defaults to 'false'. If
                enabled, each attribute should contain a single boolean expression. If the expression
                evaluates to 'true', access will be granted.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="create-session">
         <xs:annotation>
            <xs:documentation>Controls the eagerness with which an HTTP session is created by Spring Security classes.
                If not set, defaults to "ifRequired". If "stateless" is used, this implies that the
                application guarantees that it will not create a session. This differs from the use of
                "never" which means that Spring Security will not create a session, but will make use of
                one if the application does.
                </xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="ifRequired"/>
               <xs:enumeration value="always"/>
               <xs:enumeration value="never"/>
               <xs:enumeration value="stateless"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="security-context-repository-ref" type="xs:token">
         <xs:annotation>
            <xs:documentation>A reference to a SecurityContextRepository bean. This can be used to customize how the
                SecurityContext is stored between requests.
                </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="request-matcher">
         <xs:annotation>
            <xs:documentation>Supersedes the 'path-type' attribute. Defines the str