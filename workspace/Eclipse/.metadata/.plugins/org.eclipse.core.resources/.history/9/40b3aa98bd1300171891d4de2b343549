package com.zml.shsite.controllers;

import java.sql.Timestamp;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONObject;
import com.zml.shsite.components.exception.GoodNotFoundException;
import com.zml.shsite.components.exception.GoodtypeNotFoundException;
import com.zml.shsite.components.exception.UserNotFoundException;
import com.zml.shsite.models.Good;
import com.zml.shsite.models.Goodcollect;
import com.zml.shsite.models.Goodcomment;
import com.zml.shsite.models.Shuser;
import com.zml.shsite.services.ICreateGoodViewModel;
import com.zml.shsite.services.IFileService;
import com.zml.shsite.services.IGoodCollectService;
import com.zml.shsite.services.IGoodCommentService;
import com.zml.shsite.services.IGoodService;
import com.zml.shsite.services.IGoodtypeService;
import com.zml.shsite.services.IUserService;
import com.zml.shsite.services.impl.GoodCollectServiceImpl;
import com.zml.shsite.services.impl.UserServiceImpl;

@Controller
@RequestMapping("/Good")
public class GoodController {
	@Autowired
	private IGoodtypeService goodtypeService=null;
	@Autowired
	private IGoodService goodService=null;
	@Autowired
	private IFileService fileSerice=null;
	@Autowired
	private IUserService userService=null;
	@Autowired
	private ICreateGoodViewModel createGoodViewModel=null;
	@Autowired
	private IGoodCollectService goodCollectService=null;
	@Autowired
	private IGoodCommentService goodCommentService=null;
	@RequestMapping
	public String index(Model model){
		model.addAttribute("goodTypes", goodtypeService.findAll());
		model.addAttribute("goods", createGoodViewModel.create(goodService.findAll()));
		return "good/index";
	}
	@RequestMapping("/Search")
	public String search(String key,Model model){
		if(id==null){
			throw new GoodtypeNotFoundException();
		}
		model.addAttribute("goodTypes", goodtypeService.findAll());
		model.addAttribute("goods", createGoodViewModel.create(goodService.findByGoodType(id)));
		return "good/browse";
	}
	
	@RequestMapping("/Browse")
	public String browse(Integer id,Model model){
		if(id==null){
			throw new GoodtypeNotFoundException();
		}
		model.addAttribute("goodTypes", goodtypeService.findAll());
		model.addAttribute("goods", createGoodViewModel.create(goodService.findByGoodType(id)));
		return "good/browse";
	}
	
	@RequestMapping("/Details")
	public String details(Integer id,Model model,HttpSession httpSession){
		Good good=null;
		if(id==null||(good=goodService.findById(id))==null){
			throw new GoodNotFoundException();
		}
		model.addAttribute("goodTypes", goodtypeService.findAll());
		model.addAttribute("good", good);
		model.addAttribute("comments",goodCommentService.findGoodCommentByGoodId(id));
		if(httpSession.getValue("user")!=null){
			Shuser shuser=(Shuser)httpSession.getValue("user");
			int collectId=goodCollectService.isCollect(id,shuser.getShUserId());
			model.addAttribute("iscollect",collectId>0);
			model.addAttribute("collectId",collectId);
		}
		else{
			model.addAttribute("iscollect",false);
		}
		return "good/details";
	}
	//商品发布
	@Secured({"Admin","User"})
	@RequestMapping("/Publish")
	public String publish(Integer id,Model model){
		model.addAttribute("goodTypes", goodtypeService.findAll());
		//model.addAttribute("good", good);
		return "good/publish";
	}
	//商品发布post
	@Secured({"Admin","User"})
	@RequestMapping(value="/Publish",
					method=RequestMethod.POST)
	public String publishPost(Good good,MultipartFile imgFile,Model model){
		good.setDesTime(new Timestamp(System.currentTimeMillis()));
		good.setIsSell((short)0);
		if(goodService.save(good)!=null){
			fileSerice.saveGoodImage(imgFile, good.getGoodId());
			return "redirect:/Good";
		}
		model.addAttribute("goodTypes", goodtypeService.findAll());
		return "good/publish";
	}
	
	//商品收藏post
	@RequestMapping(value="/GoodCollect",
					method=RequestMethod.POST)
	@ResponseBody
	public int goodCollect(Integer goodId,Integer userId){
		if(goodId==null||goodService.findById(goodId)==null){
			return -1;
		}
		if(userId==null||userService.findById(userId)==null){
			return -1;
		}
		Goodcollect goodcollect=new Goodcollect(userId, goodId);
		goodCollectService.saveGoodCollect(goodcollect);
		return goodcollect.getGoodCollectId();
	}

	// 取消商品收藏post
	@RequestMapping(value = "/CancelCollect", method = RequestMethod.POST)
	@ResponseBody
	public boolean cancelCollect(Integer collectId) {
		if (collectId == null || goodCollectService.findById(collectId) == null) {
			return false;
		}
		goodCollectService.remove(collectId);
		return true;
	}
	//商品评论post
	@Secured({"Admin","User"})
	@RequestMapping(value="/GoodComment",
						method=RequestMethod.POST)
	@ResponseBody
	public boolean goodComment(Integer goodId,Integer userId,String comment){
		if(goodId==null||goodService.findById(goodId)==null){
			return false;
		}
		if(userId==null||userService.findById(userId)==null){
			return false;
		}
		if(comment==null||comment.equals("")){
			return false;
		}
		Goodcomment goodcomment=new Goodcomment(userId, goodId, new Timestamp(System.currentTimeMillis()), comment);
		goodCommentService.save(goodcomment);
		return true;
	}
}
